{"version":3,"sources":["../../../src/server/keyless.ts"],"sourcesContent":["import type { AccountlessApplication } from '@clerk/backend';\nimport hex from 'crypto-js/enc-hex';\nimport sha256 from 'crypto-js/sha256';\n\nimport { canUseKeyless } from '../utils/feature-flags';\n\nconst keylessCookiePrefix = `__clerk_keys_`;\n\nconst getKeylessCookieName = (): string => {\n  // eslint-disable-next-line turbo/no-undeclared-env-vars\n  const PATH = process.env.PWD;\n\n  // Handle gracefully missing PWD\n  if (!PATH) {\n    return `${keylessCookiePrefix}${0}`;\n  }\n\n  const lastThreeDirs = PATH.split('/').filter(Boolean).slice(-3).reverse().join('/');\n\n  // Hash the resulting string\n  const hash = hashString(lastThreeDirs);\n\n  return `${keylessCookiePrefix}${hash}`;\n};\n\nfunction hashString(str: string) {\n  return sha256(str).toString(hex).slice(0, 16); // Take only the first 16 characters\n}\n\nfunction getKeylessCookieValue(getter: (cookieName: string) => string | undefined): AccountlessApplication | undefined {\n  if (!canUseKeyless) {\n    return undefined;\n  }\n\n  const keylessCookieName = getKeylessCookieName();\n  let keyless;\n\n  try {\n    if (keylessCookieName) {\n      keyless = JSON.parse(getter(keylessCookieName) || '{}');\n    }\n  } catch {\n    keyless = undefined;\n  }\n\n  return keyless;\n}\n\nexport { getKeylessCookieValue, getKeylessCookieName };\n"],"mappings":";AACA,OAAO,SAAS;AAChB,OAAO,YAAY;AAEnB,SAAS,qBAAqB;AAE9B,MAAM,sBAAsB;AAE5B,MAAM,uBAAuB,MAAc;AAEzC,QAAM,OAAO,QAAQ,IAAI;AAGzB,MAAI,CAAC,MAAM;AACT,WAAO,GAAG,mBAAmB,GAAG,CAAC;AAAA,EACnC;AAEA,QAAM,gBAAgB,KAAK,MAAM,GAAG,EAAE,OAAO,OAAO,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,KAAK,GAAG;AAGlF,QAAM,OAAO,WAAW,aAAa;AAErC,SAAO,GAAG,mBAAmB,GAAG,IAAI;AACtC;AAEA,SAAS,WAAW,KAAa;AAC/B,SAAO,OAAO,GAAG,EAAE,SAAS,GAAG,EAAE,MAAM,GAAG,EAAE;AAC9C;AAEA,SAAS,sBAAsB,QAAwF;AACrH,MAAI,CAAC,eAAe;AAClB,WAAO;AAAA,EACT;AAEA,QAAM,oBAAoB,qBAAqB;AAC/C,MAAI;AAEJ,MAAI;AACF,QAAI,mBAAmB;AACrB,gBAAU,KAAK,MAAM,OAAO,iBAAiB,KAAK,IAAI;AAAA,IACxD;AAAA,EACF,QAAQ;AACN,cAAU;AAAA,EACZ;AAEA,SAAO;AACT;","names":[]}